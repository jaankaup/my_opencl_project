const char *Voronoi_Src = "\n"
"  // This method could be more efficient by caching the seed values.  Fix\n"
"  // later.\n"
"\n"
"  float x = pos.x * frequency;\n"
"  float y = frequency;\n"
"  float z = pos.y * frequency;\n"
"\n"
"  int xInt = (x > 0.0f? (int)x: (int)x - 1);\n"
"  int yInt = (y > 0.0f? (int)y: (int)y - 1);\n"
"  int zInt = (z > 0.0f? (int)z: (int)z - 1);\n"
"\n"
"  float minDist = 2147483647.0f;\n"
"  float xCandidate = 0.0f;\n"
"  float yCandidate = 0.0f;\n"
"  float zCandidate = 0.0f;\n"
"\n"
"  // Inside each unit cube, there is a seed point at a random position.  Go\n"
"  // through each of the nearby cubes until we find a cube with a seed point\n"
"  // that is closest to the specified position.\n"
"  for (int zCur = zInt - 2; zCur <= zInt + 2; zCur++) {\n"
"    for (int yCur = yInt - 2; yCur <= yInt + 2; yCur++) {\n"
"      for (int xCur = xInt - 2; xCur <= xInt + 2; xCur++) {\n"
"\n"
"        // Calculate the position and distance to the seed point inside of\n"
"        // this unit cube.\n"
"        float xPos = xCur + ValueNoise3D (xCur, yCur, zCur, seed    );\n"
"        float yPos = yCur + ValueNoise3D (xCur, yCur, zCur, seed + 1);\n"
"        float zPos = zCur + ValueNoise3D (xCur, yCur, zCur, seed + 2);\n"
"        float xDist = xPos - x;\n"
"        float yDist = yPos - y;\n"
"        float zDist = zPos - z;\n"
"        float dist = xDist * xDist + yDist * yDist + zDist * zDist;\n"
"\n"
"        if (dist < minDist) {\n"
"          // This seed point is closer to any others found so far, so record\n"
"          // this seed point.\n"
"          minDist = dist;\n"
"          xCandidate = xPos;\n"
"          yCandidate = yPos;\n"
"          zCandidate = zPos;\n"
"        }\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  float value;\n"
"  if (enableDistance) {\n"
"    // Determine the distance to the nearest seed point.\n"
"    float xDist = xCandidate - x;\n"
"    float yDist = yCandidate - y;\n"
"    float zDist = zCandidate - z;\n"
"    value = (sqrt (xDist * xDist + yDist * yDist + zDist * zDist)\n"
"      ) * 1.732051f - 1.0f;\n"
"  } else {\n"
"    value = 0.0;\n"
"  }\n"
"\n"
"  // Return the calculated distance with the displacement value applied.\n"
"  return value + (displacement * (float)ValueNoise3D (\n"
"    (int)(floor (xCandidate)),\n"
"    (int)(floor (yCandidate)),\n"
"    (int)(floor (zCandidate)), seed));\n"
"\n"
;