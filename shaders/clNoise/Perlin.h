const char *Perlin_Src = "\n"
"  float OUTPUT = 0.0;\n"
"  float signal = 0.0;\n"
"  float curPersistence = 1.0;\n"
"  float nx, ny, nz;\n"
"\n"
"  float x = pos.x * frequency;\n"
"  float y = 1.0 * frequency;\n"
"  float z = pos.y * frequency;\n"
"\n"
"  for (int curOctave = 0; curOctave < octaveCount; curOctave++) {\n"
"\n"
"    // Make sure that these floating-point values have the same range as a 32-\n"
"    // bit integer so that we can pass them to the coherent-noise functions.\n"
"    nx = MakeInt32Range (x);\n"
"    ny = MakeInt32Range (y);\n"
"    ny = MakeInt32Range (z);\n"
"\n"
"    // Get the coherent-noise value from the input value and add it to the\n"
"    // final result.\n"
"    seed = (seed + curOctave) & 0xffffffff;\n"
"    signal = GradientCoherentNoise3D (nx, ny, nz, seed);\n"
"    OUTPUT += signal * curPersistence;\n"
"\n"
"    // Prepare the next octave.\n"
"    x *= lacunarity;\n"
"    y *= lacunarity;\n"
"    z *= lacunarity;\n"
"    curPersistence *= persistence;\n"
"  }\n"
"\n"
"  return OUTPUT;\n"
"\n"
;