// The tritable. ubsan

#define INTERPOLATE

/**
 * The lookup table for edges that creates triangles.
 *                    e5               
 *          +------------------------+
 *         /|                       /|
 *        / |                      / |
 *   e9  /  |                  e10/  |
 *      /   |e4                  /   |e6
 *     /    |       e1          /    |
 *    +------------------------+     |
 *    |     |                  |     |
 *    |     |                  |     |
 *    |     |        e7        |     |
 *    |     +------------------|-----+   
 * e0 |    /                   |e2  /
 *    |   /                    |   /
 *    |  / e8                  |  /  e11
 *    | /                      | /
 *    |/                       |/
 *    +------------------------+
 *               e3
 */
__constant uint16 triTable[256] = {
 {255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255}, // Case 0
 {  0 ,    8 ,    3 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255}, // Case 1 (0,8,3) triangles verices lies on these edges.
 {  0 ,    1 ,    9 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255}, // Case 2
 {  1 ,    8 ,    3 ,    9 ,    8 ,    1 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255}, // Case 3 (1,8,3) and (9,8,1). Two triangles.
 {  1 ,    2 ,   10 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255}, // ...
 {  0 ,    8 ,    3 ,    1 ,    2 ,   10 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    2 ,   10 ,    0 ,    2 ,    9 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  2 ,    8 ,    3 ,    2 ,   10 ,    8 ,   10 ,    9 ,    8 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  3 ,   11 ,    2 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,   11 ,    2 ,    8 ,   11 ,    0 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    9 ,    0 ,    2 ,    3 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,   11 ,    2 ,    1 ,    9 ,   11 ,    9 ,    8 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  3 ,   10 ,    1 ,   11 ,   10 ,    3 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,   10 ,    1 ,    0 ,    8 ,   10 ,    8 ,   11 ,   10 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  3 ,    9 ,    0 ,    3 ,   11 ,    9 ,   11 ,   10 ,    9 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    8 ,   10 ,   10 ,    8 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  4 ,    7 ,    8 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  4 ,    3 ,    0 ,    7 ,    3 ,    4 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    1 ,    9 ,    8 ,    4 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  4 ,    1 ,    9 ,    4 ,    7 ,    1 ,    7 ,    3 ,    1 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    2 ,   10 ,    8 ,    4 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  3 ,    4 ,    7 ,    3 ,    0 ,    4 ,    1 ,    2 ,   10 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    2 ,   10 ,    9 ,    0 ,    2 ,    8 ,    4 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  2 ,   10 ,    9 ,    2 ,    9 ,    7 ,    2 ,    7 ,    3 ,    7 ,    9 ,    4 ,  255 ,  255 ,  255 ,  255},
 {  8 ,    4 ,    7 ,    3 ,   11 ,    2 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 11 ,    4 ,    7 ,   11 ,    2 ,    4 ,    2 ,    0 ,    4 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    0 ,    1 ,    8 ,    4 ,    7 ,    2 ,    3 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  4 ,    7 ,   11 ,    9 ,    4 ,   11 ,    9 ,   11 ,    2 ,    9 ,    2 ,    1 ,  255 ,  255 ,  255 ,  255},
 {  3 ,   10 ,    1 ,    3 ,   11 ,   10 ,    7 ,    8 ,    4 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,   11 ,   10 ,    1 ,    4 ,   11 ,    1 ,    0 ,    4 ,    7 ,   11 ,    4 ,  255 ,  255 ,  255 ,  255},
 {  4 ,    7 ,    8 ,    9 ,    0 ,   11 ,    9 ,   11 ,   10 ,   11 ,    0 ,    3 ,  255 ,  255 ,  255 ,  255},
 {  4 ,    7 ,   11 ,    4 ,   11 ,    9 ,    9 ,   11 ,   10 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    5 ,    4 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    5 ,    4 ,    0 ,    8 ,    3 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    5 ,    4 ,    1 ,    5 ,    0 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  8 ,    5 ,    4 ,    8 ,    3 ,    5 ,    3 ,    1 ,    5 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    2 ,   10 ,    9 ,    5 ,    4 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  3 ,    0 ,    8 ,    1 ,    2 ,   10 ,    4 ,    9 ,    5 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  5 ,    2 ,   10 ,    5 ,    4 ,    2 ,    4 ,    0 ,    2 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  2 ,   10 ,    5 ,    3 ,    2 ,    5 ,    3 ,    5 ,    4 ,    3 ,    4 ,    8 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    5 ,    4 ,    2 ,    3 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,   11 ,    2 ,    0 ,    8 ,   11 ,    4 ,    9 ,    5 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    5 ,    4 ,    0 ,    1 ,    5 ,    2 ,    3 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  2 ,    1 ,    5 ,    2 ,    5 ,    8 ,    2 ,    8 ,   11 ,    4 ,    8 ,    5 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    3 ,   11 ,   10 ,    1 ,    3 ,    9 ,    5 ,    4 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  4 ,    9 ,    5 ,    0 ,    8 ,    1 ,    8 ,   10 ,    1 ,    8 ,   11 ,   10 ,  255 ,  255 ,  255 ,  255},
 {  5 ,    4 ,    0 ,    5 ,    0 ,   11 ,    5 ,   11 ,   10 ,   11 ,    0 ,    3 ,  255 ,  255 ,  255 ,  255},
 {  5 ,    4 ,    8 ,    5 ,    8 ,   10 ,   10 ,    8 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    7 ,    8 ,    5 ,    7 ,    9 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    3 ,    0 ,    9 ,    5 ,    3 ,    5 ,    7 ,    3 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    7 ,    8 ,    0 ,    1 ,    7 ,    1 ,    5 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    5 ,    3 ,    3 ,    5 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    7 ,    8 ,    9 ,    5 ,    7 ,   10 ,    1 ,    2 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    1 ,    2 ,    9 ,    5 ,    0 ,    5 ,    3 ,    0 ,    5 ,    7 ,    3 ,  255 ,  255 ,  255 ,  255},
 {  8 ,    0 ,    2 ,    8 ,    2 ,    5 ,    8 ,    5 ,    7 ,   10 ,    5 ,    2 ,  255 ,  255 ,  255 ,  255},
 {  2 ,   10 ,    5 ,    2 ,    5 ,    3 ,    3 ,    5 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  7 ,    9 ,    5 ,    7 ,    8 ,    9 ,    3 ,   11 ,    2 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    5 ,    7 ,    9 ,    7 ,    2 ,    9 ,    2 ,    0 ,    2 ,    7 ,   11 ,  255 ,  255 ,  255 ,  255},
 {  2 ,    3 ,   11 ,    0 ,    1 ,    8 ,    1 ,    7 ,    8 ,    1 ,    5 ,    7 ,  255 ,  255 ,  255 ,  255},
 { 11 ,    2 ,    1 ,   11 ,    1 ,    7 ,    7 ,    1 ,    5 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    5 ,    8 ,    8 ,    5 ,    7 ,   10 ,    1 ,    3 ,   10 ,    3 ,   11 ,  255 ,  255 ,  255 ,  255},
 {  5 ,    7 ,    0 ,    5 ,    0 ,    9 ,    7 ,   11 ,    0 ,    1 ,    0 ,   10 ,   11 ,   10 ,    0 ,  255},
 { 11 ,   10 ,    0 ,   11 ,    0 ,    3 ,   10 ,    5 ,    0 ,    8 ,    0 ,    7 ,    5 ,    7 ,    0 ,  255},
 { 11 ,   10 ,    5 ,    7 ,   11 ,    5 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    6 ,    5 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    8 ,    3 ,    5 ,   10 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    0 ,    1 ,    5 ,   10 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    8 ,    3 ,    1 ,    9 ,    8 ,    5 ,   10 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    6 ,    5 ,    2 ,    6 ,    1 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    6 ,    5 ,    1 ,    2 ,    6 ,    3 ,    0 ,    8 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    6 ,    5 ,    9 ,    0 ,    6 ,    0 ,    2 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  5 ,    9 ,    8 ,    5 ,    8 ,    2 ,    5 ,    2 ,    6 ,    3 ,    2 ,    8 ,  255 ,  255 ,  255 ,  255},
 {  2 ,    3 ,   11 ,   10 ,    6 ,    5 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 11 ,    0 ,    8 ,   11 ,    2 ,    0 ,   10 ,    6 ,    5 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    1 ,    9 ,    2 ,    3 ,   11 ,    5 ,   10 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  5 ,   10 ,    6 ,    1 ,    9 ,    2 ,    9 ,   11 ,    2 ,    9 ,    8 ,   11 ,  255 ,  255 ,  255 ,  255},
 {  6 ,    3 ,   11 ,    6 ,    5 ,    3 ,    5 ,    1 ,    3 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    8 ,   11 ,    0 ,   11 ,    5 ,    0 ,    5 ,    1 ,    5 ,   11 ,    6 ,  255 ,  255 ,  255 ,  255},
 {  3 ,   11 ,    6 ,    0 ,    3 ,    6 ,    0 ,    6 ,    5 ,    0 ,    5 ,    9 ,  255 ,  255 ,  255 ,  255},
 {  6 ,    5 ,    9 ,    6 ,    9 ,   11 ,   11 ,    9 ,    8 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  5 ,   10 ,    6 ,    4 ,    7 ,    8 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  4 ,    3 ,    0 ,    4 ,    7 ,    3 ,    6 ,    5 ,   10 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    9 ,    0 ,    5 ,   10 ,    6 ,    8 ,    4 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    6 ,    5 ,    1 ,    9 ,    7 ,    1 ,    7 ,    3 ,    7 ,    9 ,    4 ,  255 ,  255 ,  255 ,  255},
 {  6 ,    1 ,    2 ,    6 ,    5 ,    1 ,    4 ,    7 ,    8 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    2 ,    5 ,    5 ,    2 ,    6 ,    3 ,    0 ,    4 ,    3 ,    4 ,    7 ,  255 ,  255 ,  255 ,  255},
 {  8 ,    4 ,    7 ,    9 ,    0 ,    5 ,    0 ,    6 ,    5 ,    0 ,    2 ,    6 ,  255 ,  255 ,  255 ,  255},
 {  7 ,    3 ,    9 ,    7 ,    9 ,    4 ,    3 ,    2 ,    9 ,    5 ,    9 ,    6 ,    2 ,    6 ,    9 ,  255},
 {  3 ,   11 ,    2 ,    7 ,    8 ,    4 ,   10 ,    6 ,    5 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  5 ,   10 ,    6 ,    4 ,    7 ,    2 ,    4 ,    2 ,    0 ,    2 ,    7 ,   11 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    1 ,    9 ,    4 ,    7 ,    8 ,    2 ,    3 ,   11 ,    5 ,   10 ,    6 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    2 ,    1 ,    9 ,   11 ,    2 ,    9 ,    4 ,   11 ,    7 ,   11 ,    4 ,    5 ,   10 ,    6 ,  255},
 {  8 ,    4 ,    7 ,    3 ,   11 ,    5 ,    3 ,    5 ,    1 ,    5 ,   11 ,    6 ,  255 ,  255 ,  255 ,  255},
 {  5 ,    1 ,   11 ,    5 ,   11 ,    6 ,    1 ,    0 ,   11 ,    7 ,   11 ,    4 ,    0 ,    4 ,   11 ,  255},
 {  0 ,    5 ,    9 ,    0 ,    6 ,    5 ,    0 ,    3 ,    6 ,   11 ,    6 ,    3 ,    8 ,    4 ,    7 ,  255},
 {  6 ,    5 ,    9 ,    6 ,    9 ,   11 ,    4 ,    7 ,    9 ,    7 ,   11 ,    9 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    4 ,    9 ,    6 ,    4 ,   10 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  4 ,   10 ,    6 ,    4 ,    9 ,   10 ,    0 ,    8 ,    3 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    0 ,    1 ,   10 ,    6 ,    0 ,    6 ,    4 ,    0 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  8 ,    3 ,    1 ,    8 ,    1 ,    6 ,    8 ,    6 ,    4 ,    6 ,    1 ,   10 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    4 ,    9 ,    1 ,    2 ,    4 ,    2 ,    6 ,    4 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  3 ,    0 ,    8 ,    1 ,    2 ,    9 ,    2 ,    4 ,    9 ,    2 ,    6 ,    4 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    2 ,    4 ,    4 ,    2 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  8 ,    3 ,    2 ,    8 ,    2 ,    4 ,    4 ,    2 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    4 ,    9 ,   10 ,    6 ,    4 ,   11 ,    2 ,    3 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    8 ,    2 ,    2 ,    8 ,   11 ,    4 ,    9 ,   10 ,    4 ,   10 ,    6 ,  255 ,  255 ,  255 ,  255},
 {  3 ,   11 ,    2 ,    0 ,    1 ,    6 ,    0 ,    6 ,    4 ,    6 ,    1 ,   10 ,  255 ,  255 ,  255 ,  255},
 {  6 ,    4 ,    1 ,    6 ,    1 ,   10 ,    4 ,    8 ,    1 ,    2 ,    1 ,   11 ,    8 ,   11 ,    1 ,  255},
 {  9 ,    6 ,    4 ,    9 ,    3 ,    6 ,    9 ,    1 ,    3 ,   11 ,    6 ,    3 ,  255 ,  255 ,  255 ,  255},
 {  8 ,   11 ,    1 ,    8 ,    1 ,    0 ,   11 ,    6 ,    1 ,    9 ,    1 ,    4 ,    6 ,    4 ,    1 ,  255},
 {  3 ,   11 ,    6 ,    3 ,    6 ,    0 ,    0 ,    6 ,    4 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  6 ,    4 ,    8 ,   11 ,    6 ,    8 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  7 ,   10 ,    6 ,    7 ,    8 ,   10 ,    8 ,    9 ,   10 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    7 ,    3 ,    0 ,   10 ,    7 ,    0 ,    9 ,   10 ,    6 ,    7 ,   10 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    6 ,    7 ,    1 ,   10 ,    7 ,    1 ,    7 ,    8 ,    1 ,    8 ,    0 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    6 ,    7 ,   10 ,    7 ,    1 ,    1 ,    7 ,    3 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    2 ,    6 ,    1 ,    6 ,    8 ,    1 ,    8 ,    9 ,    8 ,    6 ,    7 ,  255 ,  255 ,  255 ,  255},
 {  2 ,    6 ,    9 ,    2 ,    9 ,    1 ,    6 ,    7 ,    9 ,    0 ,    9 ,    3 ,    7 ,    3 ,    9 ,  255},
 {  7 ,    8 ,    0 ,    7 ,    0 ,    6 ,    6 ,    0 ,    2 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  7 ,    3 ,    2 ,    6 ,    7 ,    2 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  2 ,    3 ,   11 ,   10 ,    6 ,    8 ,   10 ,    8 ,    9 ,    8 ,    6 ,    7 ,  255 ,  255 ,  255 ,  255},
 {  2 ,    0 ,    7 ,    2 ,    7 ,   11 ,    0 ,    9 ,    7 ,    6 ,    7 ,   10 ,    9 ,   10 ,    7 ,  255},
 {  1 ,    8 ,    0 ,    1 ,    7 ,    8 ,    1 ,   10 ,    7 ,    6 ,    7 ,   10 ,    2 ,    3 ,   11 ,  255},
 { 11 ,    2 ,    1 ,   11 ,    1 ,    7 ,   10 ,    6 ,    1 ,    6 ,    7 ,    1 ,  255 ,  255 ,  255 ,  255},
 {  8 ,    9 ,    6 ,    8 ,    6 ,    7 ,    9 ,    1 ,    6 ,   11 ,    6 ,    3 ,    1 ,    3 ,    6 ,  255},
 {  0 ,    9 ,    1 ,   11 ,    6 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  7 ,    8 ,    0 ,    7 ,    0 ,    6 ,    3 ,   11 ,    0 ,   11 ,    6 ,    0 ,  255 ,  255 ,  255 ,  255},
 {  7 ,   11 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  7 ,    6 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  3 ,    0 ,    8 ,   11 ,    7 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    1 ,    9 ,   11 ,    7 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  8 ,    1 ,    9 ,    8 ,    3 ,    1 ,   11 ,    7 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    1 ,    2 ,    6 ,   11 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    2 ,   10 ,    3 ,    0 ,    8 ,    6 ,   11 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  2 ,    9 ,    0 ,    2 ,   10 ,    9 ,    6 ,   11 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  6 ,   11 ,    7 ,    2 ,   10 ,    3 ,   10 ,    8 ,    3 ,   10 ,    9 ,    8 ,  255 ,  255 ,  255 ,  255},
 {  7 ,    2 ,    3 ,    6 ,    2 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  7 ,    0 ,    8 ,    7 ,    6 ,    0 ,    6 ,    2 ,    0 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  2 ,    7 ,    6 ,    2 ,    3 ,    7 ,    0 ,    1 ,    9 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    6 ,    2 ,    1 ,    8 ,    6 ,    1 ,    9 ,    8 ,    8 ,    7 ,    6 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    7 ,    6 ,   10 ,    1 ,    7 ,    1 ,    3 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    7 ,    6 ,    1 ,    7 ,   10 ,    1 ,    8 ,    7 ,    1 ,    0 ,    8 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    3 ,    7 ,    0 ,    7 ,   10 ,    0 ,   10 ,    9 ,    6 ,   10 ,    7 ,  255 ,  255 ,  255 ,  255},
 {  7 ,    6 ,   10 ,    7 ,   10 ,    8 ,    8 ,   10 ,    9 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  6 ,    8 ,    4 ,   11 ,    8 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  3 ,    6 ,   11 ,    3 ,    0 ,    6 ,    0 ,    4 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  8 ,    6 ,   11 ,    8 ,    4 ,    6 ,    9 ,    0 ,    1 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    4 ,    6 ,    9 ,    6 ,    3 ,    9 ,    3 ,    1 ,   11 ,    3 ,    6 ,  255 ,  255 ,  255 ,  255},
 {  6 ,    8 ,    4 ,    6 ,   11 ,    8 ,    2 ,   10 ,    1 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    2 ,   10 ,    3 ,    0 ,   11 ,    0 ,    6 ,   11 ,    0 ,    4 ,    6 ,  255 ,  255 ,  255 ,  255},
 {  4 ,   11 ,    8 ,    4 ,    6 ,   11 ,    0 ,    2 ,    9 ,    2 ,   10 ,    9 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    9 ,    3 ,   10 ,    3 ,    2 ,    9 ,    4 ,    3 ,   11 ,    3 ,    6 ,    4 ,    6 ,    3 ,  255},
 {  8 ,    2 ,    3 ,    8 ,    4 ,    2 ,    4 ,    6 ,    2 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    4 ,    2 ,    4 ,    6 ,    2 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    9 ,    0 ,    2 ,    3 ,    4 ,    2 ,    4 ,    6 ,    4 ,    3 ,    8 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    9 ,    4 ,    1 ,    4 ,    2 ,    2 ,    4 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  8 ,    1 ,    3 ,    8 ,    6 ,    1 ,    8 ,    4 ,    6 ,    6 ,   10 ,    1 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    1 ,    0 ,   10 ,    0 ,    6 ,    6 ,    0 ,    4 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  4 ,    6 ,    3 ,    4 ,    3 ,    8 ,    6 ,   10 ,    3 ,    0 ,    3 ,    9 ,   10 ,    9 ,    3 ,  255},
 { 10 ,    9 ,    4 ,    6 ,   10 ,    4 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  4 ,    9 ,    5 ,    7 ,    6 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    8 ,    3 ,    4 ,    9 ,    5 ,   11 ,    7 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  5 ,    0 ,    1 ,    5 ,    4 ,    0 ,    7 ,    6 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 11 ,    7 ,    6 ,    8 ,    3 ,    4 ,    3 ,    5 ,    4 ,    3 ,    1 ,    5 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    5 ,    4 ,   10 ,    1 ,    2 ,    7 ,    6 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  6 ,   11 ,    7 ,    1 ,    2 ,   10 ,    0 ,    8 ,    3 ,    4 ,    9 ,    5 ,  255 ,  255 ,  255 ,  255},
 {  7 ,    6 ,   11 ,    5 ,    4 ,   10 ,    4 ,    2 ,   10 ,    4 ,    0 ,    2 ,  255 ,  255 ,  255 ,  255},
 {  3 ,    4 ,    8 ,    3 ,    5 ,    4 ,    3 ,    2 ,    5 ,   10 ,    5 ,    2 ,   11 ,    7 ,    6 ,  255},
 {  7 ,    2 ,    3 ,    7 ,    6 ,    2 ,    5 ,    4 ,    9 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    5 ,    4 ,    0 ,    8 ,    6 ,    0 ,    6 ,    2 ,    6 ,    8 ,    7 ,  255 ,  255 ,  255 ,  255},
 {  3 ,    6 ,    2 ,    3 ,    7 ,    6 ,    1 ,    5 ,    0 ,    5 ,    4 ,    0 ,  255 ,  255 ,  255 ,  255},
 {  6 ,    2 ,    8 ,    6 ,    8 ,    7 ,    2 ,    1 ,    8 ,    4 ,    8 ,    5 ,    1 ,    5 ,    8 ,  255},
 {  9 ,    5 ,    4 ,   10 ,    1 ,    6 ,    1 ,    7 ,    6 ,    1 ,    3 ,    7 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    6 ,   10 ,    1 ,    7 ,    6 ,    1 ,    0 ,    7 ,    8 ,    7 ,    0 ,    9 ,    5 ,    4 ,  255},
 {  4 ,    0 ,   10 ,    4 ,   10 ,    5 ,    0 ,    3 ,   10 ,    6 ,   10 ,    7 ,    3 ,    7 ,   10 ,  255},
 {  7 ,    6 ,   10 ,    7 ,   10 ,    8 ,    5 ,    4 ,   10 ,    4 ,    8 ,   10 ,  255 ,  255 ,  255 ,  255},
 {  6 ,    9 ,    5 ,    6 ,   11 ,    9 ,   11 ,    8 ,    9 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  3 ,    6 ,   11 ,    0 ,    6 ,    3 ,    0 ,    5 ,    6 ,    0 ,    9 ,    5 ,  255 ,  255 ,  255 ,  255},
 {  0 ,   11 ,    8 ,    0 ,    5 ,   11 ,    0 ,    1 ,    5 ,    5 ,    6 ,   11 ,  255 ,  255 ,  255 ,  255},
 {  6 ,   11 ,    3 ,    6 ,    3 ,    5 ,    5 ,    3 ,    1 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    2 ,   10 ,    9 ,    5 ,   11 ,    9 ,   11 ,    8 ,   11 ,    5 ,    6 ,  255 ,  255 ,  255 ,  255},
 {  0 ,   11 ,    3 ,    0 ,    6 ,   11 ,    0 ,    9 ,    6 ,    5 ,    6 ,    9 ,    1 ,    2 ,   10 ,  255},
 { 11 ,    8 ,    5 ,   11 ,    5 ,    6 ,    8 ,    0 ,    5 ,   10 ,    5 ,    2 ,    0 ,    2 ,    5 ,  255},
 {  6 ,   11 ,    3 ,    6 ,    3 ,    5 ,    2 ,   10 ,    3 ,   10 ,    5 ,    3 ,  255 ,  255 ,  255 ,  255},
 {  5 ,    8 ,    9 ,    5 ,    2 ,    8 ,    5 ,    6 ,    2 ,    3 ,    8 ,    2 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    5 ,    6 ,    9 ,    6 ,    0 ,    0 ,    6 ,    2 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    5 ,    8 ,    1 ,    8 ,    0 ,    5 ,    6 ,    8 ,    3 ,    8 ,    2 ,    6 ,    2 ,    8 ,  255},
 {  1 ,    5 ,    6 ,    2 ,    1 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    3 ,    6 ,    1 ,    6 ,   10 ,    3 ,    8 ,    6 ,    5 ,    6 ,    9 ,    8 ,    9 ,    6 ,  255},
 { 10 ,    1 ,    0 ,   10 ,    0 ,    6 ,    9 ,    5 ,    0 ,    5 ,    6 ,    0 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    3 ,    8 ,    5 ,    6 ,   10 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    5 ,    6 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 11 ,    5 ,   10 ,    7 ,    5 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 11 ,    5 ,   10 ,   11 ,    7 ,    5 ,    8 ,    3 ,    0 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  5 ,   11 ,    7 ,    5 ,   10 ,   11 ,    1 ,    9 ,    0 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 10 ,    7 ,    5 ,   10 ,   11 ,    7 ,    9 ,    8 ,    1 ,    8 ,    3 ,    1 ,  255 ,  255 ,  255 ,  255},
 { 11 ,    1 ,    2 ,   11 ,    7 ,    1 ,    7 ,    5 ,    1 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    8 ,    3 ,    1 ,    2 ,    7 ,    1 ,    7 ,    5 ,    7 ,    2 ,   11 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    7 ,    5 ,    9 ,    2 ,    7 ,    9 ,    0 ,    2 ,    2 ,   11 ,    7 ,  255 ,  255 ,  255 ,  255},
 {  7 ,    5 ,    2 ,    7 ,    2 ,   11 ,    5 ,    9 ,    2 ,    3 ,    2 ,    8 ,    9 ,    8 ,    2 ,  255},
 {  2 ,    5 ,   10 ,    2 ,    3 ,    5 ,    3 ,    7 ,    5 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  8 ,    2 ,    0 ,    8 ,    5 ,    2 ,    8 ,    7 ,    5 ,   10 ,    2 ,    5 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    0 ,    1 ,    5 ,   10 ,    3 ,    5 ,    3 ,    7 ,    3 ,   10 ,    2 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    8 ,    2 ,    9 ,    2 ,    1 ,    8 ,    7 ,    2 ,   10 ,    2 ,    5 ,    7 ,    5 ,    2 ,  255},
 {  1 ,    3 ,    5 ,    3 ,    7 ,    5 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    8 ,    7 ,    0 ,    7 ,    1 ,    1 ,    7 ,    5 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    0 ,    3 ,    9 ,    3 ,    5 ,    5 ,    3 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    8 ,    7 ,    5 ,    9 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  5 ,    8 ,    4 ,    5 ,   10 ,    8 ,   10 ,   11 ,    8 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  5 ,    0 ,    4 ,    5 ,   11 ,    0 ,    5 ,   10 ,   11 ,   11 ,    3 ,    0 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    1 ,    9 ,    8 ,    4 ,   10 ,    8 ,   10 ,   11 ,   10 ,    4 ,    5 ,  255 ,  255 ,  255 ,  255},
 { 10 ,   11 ,    4 ,   10 ,    4 ,    5 ,   11 ,    3 ,    4 ,    9 ,    4 ,    1 ,    3 ,    1 ,    4 ,  255},
 {  2 ,    5 ,    1 ,    2 ,    8 ,    5 ,    2 ,   11 ,    8 ,    4 ,    5 ,    8 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    4 ,   11 ,    0 ,   11 ,    3 ,    4 ,    5 ,   11 ,    2 ,   11 ,    1 ,    5 ,    1 ,   11 ,  255},
 {  0 ,    2 ,    5 ,    0 ,    5 ,    9 ,    2 ,   11 ,    5 ,    4 ,    5 ,    8 ,   11 ,    8 ,    5 ,  255},
 {  9 ,    4 ,    5 ,    2 ,   11 ,    3 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  2 ,    5 ,   10 ,    3 ,    5 ,    2 ,    3 ,    4 ,    5 ,    3 ,    8 ,    4 ,  255 ,  255 ,  255 ,  255},
 {  5 ,   10 ,    2 ,    5 ,    2 ,    4 ,    4 ,    2 ,    0 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  3 ,   10 ,    2 ,    3 ,    5 ,   10 ,    3 ,    8 ,    5 ,    4 ,    5 ,    8 ,    0 ,    1 ,    9 ,  255},
 {  5 ,   10 ,    2 ,    5 ,    2 ,    4 ,    1 ,    9 ,    2 ,    9 ,    4 ,    2 ,  255 ,  255 ,  255 ,  255},
 {  8 ,    4 ,    5 ,    8 ,    5 ,    3 ,    3 ,    5 ,    1 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    4 ,    5 ,    1 ,    0 ,    5 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  8 ,    4 ,    5 ,    8 ,    5 ,    3 ,    9 ,    0 ,    5 ,    0 ,    3 ,    5 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    4 ,    5 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  4 ,   11 ,    7 ,    4 ,    9 ,   11 ,    9 ,   10 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    8 ,    3 ,    4 ,    9 ,    7 ,    9 ,   11 ,    7 ,    9 ,   10 ,   11 ,  255 ,  255 ,  255 ,  255},
 {  1 ,   10 ,   11 ,    1 ,   11 ,    4 ,    1 ,    4 ,    0 ,    7 ,    4 ,   11 ,  255 ,  255 ,  255 ,  255},
 {  3 ,    1 ,    4 ,    3 ,    4 ,    8 ,    1 ,   10 ,    4 ,    7 ,    4 ,   11 ,   10 ,   11 ,    4 ,  255},
 {  4 ,   11 ,    7 ,    9 ,   11 ,    4 ,    9 ,    2 ,   11 ,    9 ,    1 ,    2 ,  255 ,  255 ,  255 ,  255},
 {  9 ,    7 ,    4 ,    9 ,   11 ,    7 ,    9 ,    1 ,   11 ,    2 ,   11 ,    1 ,    0 ,    8 ,    3 ,  255},
 { 11 ,    7 ,    4 ,   11 ,    4 ,    2 ,    2 ,    4 ,    0 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 { 11 ,    7 ,    4 ,   11 ,    4 ,    2 ,    8 ,    3 ,    4 ,    3 ,    2 ,    4 ,  255 ,  255 ,  255 ,  255},
 {  2 ,    9 ,   10 ,    2 ,    7 ,    9 ,    2 ,    3 ,    7 ,    7 ,    4 ,    9 ,  255 ,  255 ,  255 ,  255},
 {  9 ,   10 ,    7 ,    9 ,    7 ,    4 ,   10 ,    2 ,    7 ,    8 ,    7 ,    0 ,    2 ,    0 ,    7 ,  255},
 {  3 ,    7 ,   10 ,    3 ,   10 ,    2 ,    7 ,    4 ,   10 ,    1 ,   10 ,    0 ,    4 ,    0 ,   10 ,  255},
 {  1 ,   10 ,    2 ,    8 ,    7 ,    4 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  4 ,    9 ,    1 ,    4 ,    1 ,    7 ,    7 ,    1 ,    3 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  4 ,    9 ,    1 ,    4 ,    1 ,    7 ,    0 ,    8 ,    1 ,    8 ,    7 ,    1 ,  255 ,  255 ,  255 ,  255},
 {  4 ,    0 ,    3 ,    7 ,    4 ,    3 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  4 ,    8 ,    7 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,   10 ,    8 ,   10 ,   11 ,    8 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  3 ,    0 ,    9 ,    3 ,    9 ,   11 ,   11 ,    9 ,   10 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    1 ,   10 ,    0 ,   10 ,    8 ,    8 ,   10 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  3 ,    1 ,   10 ,   11 ,    3 ,   10 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    2 ,   11 ,    1 ,   11 ,    9 ,    9 ,   11 ,    8 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  3 ,    0 ,    9 ,    3 ,    9 ,   11 ,    1 ,    2 ,    9 ,    2 ,   11 ,    9 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    2 ,   11 ,    8 ,    0 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  3 ,    2 ,   11 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  2 ,    3 ,    8 ,    2 ,    8 ,   10 ,   10 ,    8 ,    9 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  9 ,   10 ,    2 ,    0 ,    9 ,    2 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  2 ,    3 ,    8 ,    2 ,    8 ,   10 ,    0 ,    1 ,    8 ,    1 ,   10 ,    8 ,  255 ,  255 ,  255 ,  255},
 {  1 ,   10 ,    2 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  1 ,    3 ,    8 ,    9 ,    1 ,    8 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    9 ,    1 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {  0 ,    3 ,    8 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255},
 {255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255 ,  255}};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Calculate the cube case based on the cube corner density values and the isovalue.
 */
int calculate_case(float d0, float d1, float d2, float d3, float d4, float d5, float d6, float d7 , float isovalue)
{
  int result = 0;
  
  if (d7 < isovalue) { result += 128;} 
  if (d6 < isovalue) { result += 64;}
  if (d5 < isovalue) { result += 32;} 
  if (d4 < isovalue) { result += 16;} 
  if (d3 < isovalue) { result += 8; }
  if (d2 < isovalue) { result += 4; }
  if (d1 < isovalue) { result += 2; }
  if (d0 < isovalue) { result += 1; }
  
  return result;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//        v5                        v6
//         +------------------------+
//        /|                       /|
//       / |                      / |
//      /  |                     /  |
//     /   |                    /   |  
//    /    |                   /    |
//v1 +------------------------+ v2  |
//   |     |                  |     |
//   |     |                  |     |
//   |     |                  |     |
//   |  v4 +------------------|-----+ v7
//   |    /                   |    /
//   |   /                    |   /
//   |  /                     |  /    
//   | /                      | /
//   |/                       |/
//   +------------------------+
//  v0                       v3
//
//
//           P(up)  P(z)
//              ^  /
//              | /
// P(left) <-- P(X) ---> P(right)
//            / |
//           /  |
//  P(z_minus)  P(down)

/**
 * Calculate normal for a cube corner. A density fuction of neighbours densityvalues.
 * @index The index for getting the density value for the cube corner.
 * @x_offset The global width of the marching cubes area.
 * @y_offset The global heihgt of the marching cubes area.
 * @density_values Pointer to the density_values array.
 */
float4 calculate_normal(int index, int x_offset, int y_offset, __global float* density_values)
{
  float3 grad;
  float right = density_values[index-1];
  float left = density_values[index+1]; 
  float up = density_values[index+x_offset]; 
  float down = density_values[index-x_offset]; 
  float z = density_values[index+x_offset*y_offset]; 
  float z_minus = density_values[index-x_offset*y_offset]; 
  grad.x = right - left;
  grad.y = up - down;
  grad.z = z - z_minus;
  return (float4){normalize(grad),0.0f}; // Normalize the result. 
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//
//     A cube edge.             
//               
//     va-----------------------vb
//              ^
//              |
//       Estimation for the isovalue 


/**
 * Interpolate the vertice to the estimated isovalue position. We wan't to estimate the surface point.
 * The interpolation can be disabled by commented out the #define INTERPOLATE at the start of this file.
 * @param va A point of a an edge. va.xyz is the positision of the point. va.w holds the denstity value. 
 * @param vb A point of a an edge. vb.xyz is the positision of the point. vb.w holds the denstity value. 
 * @param isovalue The suface value. 
 */ 
float4 interpolateV(float4 va, float4 vb, float isovalue)
{
   #ifdef INTERPOLATE
     if (fabs(isovalue - va.w) < 0.00001f) { return va; }
     else if (fabs(isovalue - vb.w) < 0.00001f) { return vb; }
     else if (fabs(va.w-vb.w) < 0.00001f) { return vb; }
     
     else
     {
       float4 p;
       float mu = (isovalue - va.w) / (vb.w - va.w);
       p.x = va.x + mu * (vb.x - va.x);
       p.y = va.y + mu * (vb.y - va.y);
       p.z = va.z + mu * (vb.z - va.z);
       p.w = 0.0f;
       return p;
     }
   #else
      return (va+vb)/2.0f;
   #endif
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Interpolate the normal.
 * The interpolation can be disabled by commented out the #define INTERPOLATE at the start of this file.
 * @param na The normal for a edge point. 
 * @param nb The normal for the other edge point. 
 * @param isovalue The suface value. 
 */ 
float4 interpolateN(float4 na, float4 nb, float densityA, float densityB, float isovalue)
{
   #ifdef INTERPOLATE
     if (fabs(isovalue - densityA) < 0.001) { return na; }
     else if (fabs(isovalue - densityB) < 0.001) { return nb; }
     else if (fabs(densityA-densityB) < 0.001) { return na; }
     
     else
     {
       float4 p;
       float mu = (isovalue - densityA) / (densityB - densityA);
       p.x = na.x + mu * (nb.x - na.x);
       p.y = na.y + mu * (nb.y - na.y);
       p.z = na.z + mu * (nb.z - na.z);
       p.w = 0.0f;
       return normalize(p);
     }
   #else
      return normalize((na+nb)/2.0f);
      //return normalize(na);
   #endif
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Compute barycentric coordinates (u, v, w) for
// point p with respect to triangle (a, b, c)
float4 barycentric(float4 p, float4 a, float4 b, float4 c)
{
    float4 v0 = b - a, v1 = c - a, v2 = p - a;
    float d00 = dot(v0, v0);
    float d01 = dot(v0, v1);
    float d11 = dot(v1, v1);
    float d20 = dot(v2, v0);
    float d21 = dot(v2, v1);
    float denom = d00 * d11 - d01 * d01;
    float v = (d11 * d20 - d01 * d21) / denom;
    float w = (d00 * d21 - d01 * d20) / denom;
    float u = 1.0f - v - w;
    return (float4){u,v,w,0.0};
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float4 create_texturecoordinate(float4 point)
{

   float4 a = (float4){0.0,0.0,0.0,0.0};
   float4 b = (float4){50.0,50.0,0.0,0.0};
   float4 c = (float4){0.0,50.0,0.0,0.0};
   
   float4 uv = barycentric(point,a,b,c);
   return uv;

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Creates one vertex and one normal and saves the result to the output buffer.
 * This function could have been split to 11 smaller functions. Or we could have created a 
 * cube struct and pass it by pointer to this funktion.
 */ 
void createVertex(uint edgeValue,
                  float4 pos0,
                  float4 pos1,
                  float4 pos2,
                  float4 pos3,
                  float4 pos4,
                  float4 pos5,
                  float4 pos6,
                  float4 pos7,
                  float4 normal0,
                  float4 normal1,
                  float4 normal2,
                  float4 normal3,
                  float4 normal4,
                  float4 normal5,
                  float4 normal6,
                  float4 normal7,
                  int arrayIndex,
                  float isovalue,
                  __global float4* output)
{
    // EDGE NUMBER 0
    if (edgeValue == 0)
    {
          output[arrayIndex] = interpolateV(pos0,pos1,isovalue);
          output[arrayIndex+1] = interpolateN(normal0, normal1, pos0.w, pos1.w, isovalue);
          //float 4 tex = create_texturecoordinate(output[arrayIndex]);
    }
    // EDGE NUMBER 1
    else if (edgeValue == 1)
    {
          output[arrayIndex] = interpolateV(pos1,pos2,isovalue);
          output[arrayIndex+1] = interpolateN(normal1, normal2, pos1.w, pos2.w, isovalue);
    }           
    // EDGE NUMBER 2
    else if (edgeValue == 2)
    {
        output[arrayIndex] = interpolateV(pos2,pos3,isovalue);
        output[arrayIndex+1] = interpolateN(normal2, normal3, pos2.w, pos3.w, isovalue);
    }           
    // EDGE NUMBER 3
    else if (edgeValue == 3)
    {
        output[arrayIndex] = interpolateV(pos3,pos0,isovalue);
        output[arrayIndex+1] = interpolateN(normal3, normal0, pos3.w, pos0.w, isovalue);
    }           
    // EDGE NUMBER 4
    else if (edgeValue == 4)
    {
        output[arrayIndex] = interpolateV(pos4,pos5,isovalue);
        output[arrayIndex+1] = interpolateN(normal4, normal5, pos4.w, pos5.w, isovalue);
    }           
    // EDGE NUMBER 5
    else if (edgeValue == 5)
    {
        output[arrayIndex] = interpolateV(pos5,pos6,isovalue);
        output[arrayIndex+1] = interpolateN(normal5, normal6, pos5.w, pos6.w, isovalue);
    }           
    // EDGE NUMBER 6
    else if (edgeValue == 6)
    {
        output[arrayIndex] = interpolateV(pos6,pos7,isovalue);
        output[arrayIndex+1] = interpolateN(normal6, normal7, pos6.w, pos7.w, isovalue);
    }           
    // EDGE NUMBER 7
    else if (edgeValue == 7)
    {
        output[arrayIndex] = interpolateV(pos7,pos4,isovalue);
        output[arrayIndex+1] = interpolateN(normal7, normal4, pos7.w, pos4.w, isovalue);
    }           
    // EDGE NUMBER 8
    else if (edgeValue == 8)
    {
        output[arrayIndex] = interpolateV(pos0,pos4,isovalue);
        output[arrayIndex+1] = interpolateN(normal0, normal4, pos0.w, pos4.w, isovalue);
    }           
    // EDGE NUMBER 9
    else if (edgeValue == 9)
    {
        output[arrayIndex] = interpolateV(pos1,pos5,isovalue);
        output[arrayIndex+1] = interpolateN(normal1, normal5, pos1.w, pos5.w, isovalue);
    }           
    // EDGE NUMBER 10 
    else if (edgeValue == 10)
    {
        output[arrayIndex] = interpolateV(pos2,pos6,isovalue) ;
        output[arrayIndex+1] = interpolateN(normal2, normal6, pos2.w, pos6.w, isovalue);
    }           
    // EDGE NUMBER 11 
    else if (edgeValue == 11)
    {
        output[arrayIndex] = interpolateV(pos3,pos7,isovalue);
        output[arrayIndex+1] = interpolateN(normal3, normal7, pos3.w, pos7.w, isovalue);
    }    
    else
    {
        output[arrayIndex] = (float4){666,555,777,edgeValue};
        output[arrayIndex+1] = (float4){666,555,777,666.666};

    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void createFlatShading(int index, __global float4* output, bool clockWise_verts)
{
   float4 a = (float4){output[index].xyz, 0.0}; 
   float4 b = (float4){output[index+3].xyz, 0.0}; 
   float4 c = (float4){output[index+6].xyz, 0.0};
 //  float4 n_density_a = output[index+1]; 
 //  float4 n_density_b = output[index+4]; 
 //  float4 n_density_c = output[index+7]; 
 //  float4 average = normalize((n_density_a+n_density_b+n_density_c)/3.0f);
   float4 u = b - c;
   float4 v = a - c;
   if (clockWise_verts) {
     float4 normal = normalize(cross(u,v));
     output[index+2] = normal;
     output[index+5] = normal;
     output[index+8] = normal;
   }
   else {
     float4 normal = normalize(cross(v,u)); 
     output[index+2] = normal;
     output[index+5] = normal;
     output[index+8] = normal;
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Translate and scale a single vertice to the "world" coordinates.
 * @param point The vertice.
 * @param block_size The length of the cube edge..
 * @param base_poinst The left-bottom position of the marching cubes area.
 * @param return The translated/scaled vertice.
 */
float4 translate_point(float4 point, float block_size, float4 base_point)
{
  return (float4){point.x,point.y,point.z,0.0}*block_size + base_point;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Map cube coordinate to the index of the density value array.
 * @param global_x The count of total poinst in x direction.
 * @param global_y The count of total poinst in y direction.
 * @param global_z The count of total poinst in z direction.
 * @param x_offset The offset for density array for y coordinates.
 * @param y_offset The offset for density array for z coordinates.
 * @param return The index of density value array.
 */
int globalIndex(int global_x, int global_y, int global_z, int x_offset, int y_offset) 
{
  return global_x + x_offset * global_y + x_offset * y_offset * global_z;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** 
 * Marching cubes part2. The actual marching cubes algoritm. A single thread handles   
 * one cube and saves the geometry to the output array.
 * @density_values A array of all density values.
 * @output The output array of mc. Saves interleaved pos/nor (vvvv nnnn) values.
 * @x_offset The x-dimension of the whole marching cubes area.
 * @y_offset The y-dimension of the whole marching cubes area.
 * @z_offset The z-dimension of the whole marching cubes area.
 * @block_size The length of the cube edge.
 * @isovalue The surface value of the densityfield.
 * @base_point The left-bottom coordinate of the whole marching cubes area.
 */
__kernel void mc(__global float* density_values,
                 __global float4* output,
                 __global int* counterArg,
                 int x_offset,
                 int y_offset,
                 int z_offset,
                 float block_size,
                 float isovalue,
                 float4 base_point)
{
  // This is our atomic counter used as a index when storing values to the output.
  volatile __global int* counterPtr = counterArg;

  // The global position.
  const int global_id_x = get_global_id(0);
  const int global_id_y = get_global_id(1);
  const int global_id_z = get_global_id(2);
 
  // We won't create cubes that are outside the cube-area. 
  if (global_id_x == x_offset-1 ||
      global_id_x == 0 ||
      global_id_y == y_offset-1 ||
      global_id_y == 0 ||
      global_id_z == z_offset-1 ||
      global_id_z == 0) return;

  // This point translated and scaled to the marching cubes area.
  const float4 this_point_global = translate_point((float4){global_id_x,global_id_y,global_id_z,0.0},block_size,base_point);

  // The index of global array for point v0. finalID could be renamed to p0_index. 
  const int finalID = globalIndex(global_id_x,global_id_y,global_id_z, x_offset,y_offset); 


//        v5                        v6
//         +------------------------+
//        /|                       /|
//       / |                      / |
//      /  |                     /  |
//     /   |                    /   |  
//    /    |                   /    |
//v1 +------------------------+ v2  |
//   |     |                  |     |
//   |     |                  |     |
//   |     |                  |     |
//   |  v4 +------------------|-----+ v7
//   |    /                   |    /
//   |   /                    |   /
//   |  /                     |  /    
//   | /                      | /
//   |/                       |/
//   +------------------------+
//  v0                       v3


  // The global indices of cube corner points. We need this so we can get the corresponding values from the density-array.
  const int index1 = finalID+x_offset;   // v1
  const int index2 = finalID+x_offset+1; // v2
  const int index3 = finalID+1;          // v3
  const int index4 = finalID+x_offset*y_offset; // v4
  const int index5 = finalID+x_offset+x_offset*y_offset; // v5
  const int index6 = finalID+x_offset+x_offset*y_offset+1; // v6
  const int index7 = finalID+x_offset*y_offset+1; // v7
     
  // The density values for cube corner points.
  const float v0_density = density_values[finalID];
  const float v1_density = density_values[index1];
  const float v2_density = density_values[index2];
  const float v3_density = density_values[index3];
  const float v4_density = density_values[index4];
  const float v5_density = density_values[index5];
  const float v6_density = density_values[index6];
  const float v7_density = density_values[index7];
   
  // Calculate the cube case number.
  const int cube_case = calculate_case(v0_density,
                                       v1_density,
                                       v2_density,
                                       v3_density,
                                       v4_density,
                                       v5_density,
                                       v6_density,
                                       v7_density,
                                       isovalue);


  // The cube doesn't produce any geometry. There is not surface intersections in this cube.
  if (cube_case == 0 || cube_case == 255) return;

  // Calculate the "world" coordinates of each cube corner point and add to w-component the corresponding density value.
  float4 p0 = (float4){translate_point((float4){global_id_x,   global_id_y,   global_id_z,   0.0}, block_size, base_point).xyz, v0_density}; 
  float4 p1 = (float4){translate_point((float4){global_id_x,   global_id_y+1, global_id_z,   0.0}, block_size, base_point).xyz, v1_density}; 
  float4 p2 = (float4){translate_point((float4){global_id_x+1, global_id_y+1, global_id_z,   0.0}, block_size, base_point).xyz, v2_density}; 
  float4 p3 = (float4){translate_point((float4){global_id_x+1, global_id_y,   global_id_z,   0.0}, block_size, base_point).xyz, v3_density}; 
  float4 p4 = (float4){translate_point((float4){global_id_x,   global_id_y,   global_id_z+1, 0.0}, block_size, base_point).xyz, v4_density}; 
  float4 p5 = (float4){translate_point((float4){global_id_x,   global_id_y+1, global_id_z+1, 0.0}, block_size, base_point).xyz, v5_density}; 
  float4 p6 = (float4){translate_point((float4){global_id_x+1, global_id_y+1, global_id_z+1, 0.0}, block_size, base_point).xyz, v6_density}; 
  float4 p7 = (float4){translate_point((float4){global_id_x+1, global_id_y,   global_id_z+1, 0.0}, block_size, base_point).xyz, v7_density}; 
     
  // Calculate normals for each cube corners.
  float4 n0 = calculate_normal(finalID, x_offset, y_offset, density_values);  
  float4 n1 = calculate_normal(index1,  x_offset, y_offset, density_values); 
  float4 n2 = calculate_normal(index2,  x_offset, y_offset, density_values); 
  float4 n3 = calculate_normal(index3,  x_offset, y_offset, density_values); 
  float4 n4 = calculate_normal(index4,  x_offset, y_offset, density_values); 
  float4 n5 = calculate_normal(index5,  x_offset, y_offset, density_values); 
  float4 n6 = calculate_normal(index6,  x_offset, y_offset, density_values); 
  float4 n7 = calculate_normal(index7,  x_offset, y_offset, density_values); 

  // Get the edge-array from the triTable.
  uint16 tri_case = triTable[cube_case];

  // We are going to save a triangle to the output array. 3 postion vertices and 3 normal vertices (vvv nnn).
  // Reserve the next 6 indices from the output arrary for this triangle.
  int index = atomic_add(counterPtr,9);

  createVertex(tri_case.s0, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index, isovalue, output);
  createVertex(tri_case.s1, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index+3, isovalue, output);
  createVertex(tri_case.s2, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index+6, isovalue, output);
  createFlatShading(index, output, false);
  //createFlatShading(index, output, true);

  // If this is true, this case won't produce any more geometry.
  if (tri_case.s3 == 255) return;

  // Create another triangle and save it to the output.
  int index_2 = atomic_add(counterPtr,9);

  createVertex(tri_case.s3, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index_2, isovalue, output);
  createVertex(tri_case.s4, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index_2+3, isovalue, output);
  createVertex(tri_case.s5, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index_2+6, isovalue, output);
  createFlatShading(index_2, output, false);
  //createFlatShading(index, output, true);

  if (tri_case.s6 == 255) return;

  int index_3 = atomic_add(counterPtr,9);

  createVertex(tri_case.s6, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index_3, isovalue, output);
  createVertex(tri_case.s7, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index_3+3, isovalue, output);
  createVertex(tri_case.s8, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index_3+6, isovalue, output);
  createFlatShading(index_3, output, false);
  //createFlatShading(index, output, true);

  if (tri_case.s9 == 255) return;

  int index_4 = atomic_add(counterPtr,9);

  createVertex(tri_case.s9, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index_4, isovalue, output);
  createVertex(tri_case.sa, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index_4+3, isovalue, output);
  createVertex(tri_case.sb, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index_4+6, isovalue, output);
  createFlatShading(index_4, output, false);
  //createFlatShading(index, output, true);

  if (tri_case.sc == 255) return;

  int index_5 = atomic_add(counterPtr,9);
  createVertex(tri_case.sc, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index_5, isovalue, output);
  createVertex(tri_case.sd, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index_5+3, isovalue, output);
  createVertex(tri_case.se, p0,p1,p2,p3,p4,p5,p6,p7,n0,n1,n2,n3,n4,n5,n6,n7, index_5+6, isovalue, output);
  createFlatShading(index_5, output, false);
  //createFlatShading(index, output, true);

  // We are done with this cube.
}                                                                               
